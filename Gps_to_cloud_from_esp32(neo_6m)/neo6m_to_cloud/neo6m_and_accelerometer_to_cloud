#include <WiFi.h>
#include <HTTPClient.h>
#include <TinyGPS++.h>
#include <HardwareSerial.h>
#include <TinyGPS++.h>
#include <Wire.h>

const char* ssid = "DWF490988";
const char* password="KU3CEDX5";
const char* firestoreURL = "https://firestore.googleapis.com/v1/projects/zollyapp/databases/(default)/documents/your_collection/your_document?key=AIzaSyCCmaLQVfUrt_iyv6sM4TsCi14tBhCGB_Q";
const char *cloudFunctionURL = "https://europe-west6-zollyapp.cloudfunctions.net/function-1";


WiFiClient client;
TinyGPSPlus gps;
HardwareSerial gpsSerial(1); // Use UART1 for GPS

const int ADXL345 = 0x53; // The ADXL345 sensor I2C address
float X_out, Y_out, Z_out;
int steps = 0;
float lastX = 0, lastY = 0;
const float stepThresholdX = 0.5; // Threshold for step detection in X-axis
const float stepThresholdY = 0.5; // Threshold for step detection in Y-axis


void setup() {
  Serial.begin(115200);
  gpsSerial.begin(9600, SERIAL_8N1, 17, -1); // Start GPS serial communication; TX pin is not used, so -1
  WiFi.begin(ssid,password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.println("Connecting to WiFi...");
  }
  Serial.println("Connected to WiFi");
   Wire.begin(11,12); // Initialize I2C communication
  Wire.beginTransmission(ADXL345);
  Wire.write(0x2D); // Access POWER_CTL Register
  Wire.write(8); // Bit D3 High for measurement mode
  Wire.endTransmission();
  delay(10);
}

void loop() {
  // GPS reading
  while (gpsSerial.available() > 0) {
    char c = gpsSerial.read();
    if (gps.encode(c)) {
      if (gps.location.isValid()) {
        String latitudeStr = String(gps.location.lat(), 6);
        String longitudeStr = String(gps.location.lng(), 6);
        String gpsData = "{\"latitude\":" + latitudeStr + ",\"longitude\":" + longitudeStr + ",\"steps\":" + String(steps) + "}";
        sendGPSDataToCloud(gpsData);
        Serial.print("Latitude: ");
        Serial.println(latitudeStr);
        Serial.print("Longitude: ");
        Serial.println(longitudeStr);
        Serial.print("Steps: ");
        Serial.println(steps);
      }
    }}
    
  
  
  // Accelerometer reading for step detection
  Wire.beginTransmission(ADXL345);
  Wire.write(0x32); // ACCEL_XOUT_H register
  Wire.endTransmission(false);
  Wire.requestFrom(ADXL345, 6, true);
  
  X_out = (Wire.read() | Wire.read() << 8) / 256.0;
  Y_out = (Wire.read() | Wire.read() << 8) / 256.0;
  Z_out = (Wire.read() | Wire.read() << 8) / 256.0;
  
  if (abs(X_out - lastX) > stepThresholdX || abs(Y_out - lastY) > stepThresholdY) {
    steps++;
    Serial.print("Step Detected. Total Steps: ");
    Serial.println(steps);
  }
  
  lastX = X_out;
  lastY = Y_out;
  
  delay(1000); // Delay for readability
}


void sendGPSDataToCloud(String data) {
  if(WiFi.status() == WL_CONNECTED){
    HTTPClient http;
    http.begin(cloudFunctionURL);
    http.addHeader("Content-Type", "application/json");
    int httpResponseCode = http.POST(data);

    if (httpResponseCode == 200) { // Checking for HTTP status 200 OK
      Serial.println("Successfully uploaded to cloud!");
    }
    else {
      Serial.print("Upload failed with HTTP response code: ");
      Serial.println(httpResponseCode);
    }
    http.end();
  }
  delay(10000); // Adjust based on how often you want to send data
}







