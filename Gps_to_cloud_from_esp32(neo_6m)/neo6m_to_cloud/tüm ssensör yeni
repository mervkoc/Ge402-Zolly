#include <WiFi.h>
#include <HTTPClient.h>
#include <TinyGPS++.h>
#include <HardwareSerial.h>
#include <PulseSensorPlayground.h>
#include <Wire.h>

// WiFi and Cloud Configuration
const char* ssid = "Merv";
const char* password="buguncuma1";
const char* firestoreURL = "https://firestore.googleapis.com/v1/projects/zollyapp/databases/(default)/documents/your_collection/your_document?key=AIzaSyCCmaLQVfUrt_iyv6sM4TsCi14tBhCGB_Q";
const char *cloudFunctionURL = "https://europe-west6-zollyapp.cloudfunctions.net/function-1";


// GPS Configuration
WiFiClient client;
TinyGPSPlus gps;
HardwareSerial gpsSerial(1); // Use UART1 for GPS

// PulseSensor Configuration
const int PulseWire = A0; // Adjust if necessary
PulseSensorPlayground pulseSensor;
const int Threshold = 550;


const int ADXL345 = 0x53; // The ADXL345 sensor I2C address
const int heart=98;
float X_out, Y_out, Z_out;
int steps = 0;
float lastX = 0, lastY = 0,lastZ = 0;
const float stepThresholdX = 250; // Threshold for step detection in X-axis
const float stepThresholdY = 250; // Threshold for step detection in Y-axis
const float stepThresholdZ = 0.8;
// Function prototypes
void collectGPSData(TinyGPSPlus& gps);
void calculateStepData();
int calculateBPM();
void sendDataToCloud(String latitude, String longitude, int steps, int bpm);

void setup() {
  Serial.begin(115200);
  gpsSerial.begin(9600, SERIAL_8N1, 8, -1); // RX=17, TX=18
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.println("Connecting to WiFi...");
  }
  Serial.println("Connected to WiFi");

  pulseSensor.analogInput(PulseWire);
  pulseSensor.setThreshold(Threshold);
  pulseSensor.begin();

  Wire.begin(21,22); // Start I2C for ADXL345
}

void loop() {
  TinyGPSPlus gps;
  collectGPSData(gps);
  calculateStepData();
  int bpm = calculateBPM();

  String latitude, longitude;
  if (gps.location.isValid()) {
    latitude = String(gps.location.lat(), 6);
    longitude = String(gps.location.lng(), 6);
  } else {
    // Placeholder or indicate GPS not valid
    latitude = "N/A";
    longitude = "N/A";
    Serial.println("GPS signal not available.");
  }

  // Print to Serial Monitor
  Serial.print("Latitude: ");
  Serial.println(latitude);
  Serial.print("Longitude: ");
  Serial.println(longitude);
  Serial.print("Total Steps: ");
  Serial.println(steps);
  Serial.print("Heart Rate: ");
  Serial.println(bpm);

  sendDataToCloud(latitude, longitude, steps, bpm); // This function sends the data to your cloud

  delay(100); // Adjust the delay as needed
}


// void loop() {
//   TinyGPSPlus gps;
//   collectGPSData(gps);
//   calculateStepData();
//   int bpm = calculateBPM();
//   if (gps.location.isValid()) {
//     String latitude = String(gps.location.lat(), 6);
//     String longitude = String(gps.location.lng(), 6);
//     sendDataToCloud(latitude, longitude, steps, bpm);
//   }
//   else{
//     String latitude  ="39.87247";
//     String longitude="32.75067";
//     sendDataToCloud(latitude, longitude, steps, bpm);
//   }
//   delay(10000); // Adjust the delay as needed
// }

void collectGPSData(TinyGPSPlus& gps) {
  while (gpsSerial.available() > 0) {
    char c = gpsSerial.read();
    gps.encode(c);
  }
}

void calculateStepData() {

   static unsigned long lastCheck = 0;
    unsigned long now = millis();
    if (now - lastCheck >= 200) { // Check every 200 ms
        lastCheck = now;
    }

  Wire.beginTransmission(ADXL345);
  Wire.write(0x32); // ACCEL_XOUT_H register
  Wire.endTransmission(false);
  Wire.requestFrom(ADXL345, 6, true);
  
  X_out = (Wire.read() | Wire.read() << 8) / 256.0;
  Y_out = (Wire.read() | Wire.read() << 8) / 256.0;
  Z_out = (Wire.read() | Wire.read() << 8) / 256.0;
  
  if (abs(Z_out - lastZ) > stepThresholdZ && (abs(X_out - lastX) > stepThresholdX || abs(Y_out - lastY) > stepThresholdY)) {
    steps++;
    Serial.print("Step Detected. Total Steps: ");
    Serial.println(steps);
}
}

int calculateBPM() {
  if (pulseSensor.sawStartOfBeat()) {
    return pulseSensor.getBeatsPerMinute();
  }
  return 0; // Return 0 if no beat is detected
}

void sendDataToCloud(String latitude, String longitude, int steps, int bpm) {
  if (WiFi.status() == WL_CONNECTED) {
    HTTPClient http;
    http.begin(cloudFunctionURL);
    http.addHeader("Content-Type", "application/json");

    String postData = "{\"latitude\": \"" + latitude + "\", \"longitude\": \"" + longitude + "\", \"steps\": " + String(steps) + ", \"heart\": " + String(bpm) + "}";
    int httpResponseCode = http.POST(postData);

    if (httpResponseCode > 0) {
      Serial.print("HTTP Response code: ");
      Serial.println(httpResponseCode);
    } else {
      Serial.print("Error code: ");
      Serial.println(httpResponseCode);
    }
    http.end();
  }
}
